name: Update Team File and Create PR

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write

jobs:
  update-team-file:
    # if: ${{ github.event_name == 'issues' && contains(join(',', github.event.issue.labels.*.name), 'animal-jam') }}
    runs-on: ubuntu-latest

    steps:

      - uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/teams_creation.yaml


      # - name: Extract User ID and Team Name
      #   id: extract-user-id
      #   run: |
      #     echo "Extracting user ID and team name from issue body..."
      #     echo "${{ github.event.issue.body }}"
      #     ISSUE_BODY="${{ github.event.issue.body }}"
      #     TEAM_NAME=$(echo "$ISSUE_BODY" | grep -A 1 "### project-name" | tail -n 1 | xargs)
      #     USER_ID=$(echo "$ISSUE_BODY" | grep -A 1 "### user-id" | tail -n 1 | xargs)

      #     echo "USER_ID = $USER_ID"
      #     echo "TEAM_NAME = $TEAM_NAME"
      #     echo "USER_ID=$USER_ID" >> $GITHUB_ENV
      #     echo "TEAM_NAME=$TEAM_NAME" >> $GITHUB_ENV
      #   shell: bash

      # - name: Testing Env Values
      #   id: test-env
      #   run: |
      #     echo "USER_ID = ${{ steps.issue-parser.outputs.issueparser_user-id }}"
      #     echo "TEAM_NAME = ${{ steps.issue-parser.outputs.issueparser_project-nanme }}"

      # - name: Validate User ID
      #   id: validate-user
      #   run: |
      #     echo "Validating user ID: $USER_ID"
          
      #     echo "(curl -s https://portal.ihs.ihs-dev.eks-dev.dht.live/api/svc/v1/users?query=$USER_ID&limit=25&offset=0&showInvalidUsers=true)"
        # env:
        #   USER_ID: ${{ github.event.inputs.user-id }}
      
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update Teams File
        id: update-teams
        # if: steps.validate-user.outcome == 'success'
        run: |
          # echo "Updating teams file for team: $TEAM_NAME"
          # FILE_PATH="test-folder/${TEAM_NAME}.yaml"
          # if [ ! -f "$FILE_PATH" ]; then
          #   echo "Team file $FILE_PATH does not exist."
          #   exit 1
          # fi
          # yq eval ".members += [\"$USER_ID\"] | .members |= unique" -i "$FILE_PATH"
          # echo "Updated team file: $FILE_PATH"
          
          echo "Testing PR"
          touch test-folder/MyTestFile.txt

        # env:
        #   TEAM_NAME: ${{ github.event.inputs.project-name }}
        #   USER_ID: ${{ github.event.inputs.user-id }}
      
      
      - name: Create Pull Request
        # if: steps.update-teams.outcome == 'success'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: update-team-file-${{ github.event.issue.number }}
          commit-message: "Update team file for ${{ github.event.issue.number }}"
          title: "Update team file for ${{ github.event.issue.number }}"
          body: "This PR updates the team file based on the issue form submission."
          labels: "automation"
          base: main